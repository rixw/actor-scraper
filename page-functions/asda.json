{
  "startUrls": [
    {
      "requestsFromUrl": "https://apify-uploads-prod.s3.amazonaws.com/5WhYM2sSpZLYDbcsg-asda-seeds.txt",
      "method": "GET",
      "userData": {
        "pageType": "plp"
      }
    }
  ],
  "useRequestQueue": true,
  "pageFunction": "async function pageFunction(context) {\n    const { request, response, log, waitFor } = context;\n    const { url, userData } = request;\n    const $ = context.jQuery;\n\n    $.prototype.match = function(pattern) {\n        if (this.length > 0 && pattern) {\n            return this.filter((i, el) => $(el).text().search(pattern) > -1);\n        }\n        return this;\n    };\n    $.prototype.firstText = function() {\n        const contents = this.first().text();\n        return contents ? contents.replace(/\\s\\s+/g, ' ').trim() : '';\n    };\n    $.prototype.eachText = function(joinWith) {\n        const result = [];\n        this.each((i, el) => result.push($(el).firstText()));\n        if (joinWith) return result.join(joinWith);\n        return result;\n    };\n\n    if (response.status >= 400) throw new Error(`URL: ${url} response status ${response.status}`);\n    \n    if (userData.pageType === 'plp') return handlePlp();\n    else if (userData.pageType === 'pdp') return handlePdp();\n    return;\n\n    async function handlePdp() {\n        log.debug(`URL: ${url} parsing PDP...`);\n        const idSelector = 'div#pd-wrapper div.prod-code h3 span';\n        await waitFor(idSelector);\n        await waitFor(100);\n\n        // Check we can get an ID\n        const id = $(idSelector).firstText();\n        if (!id) {\n            log.debug(`URL: ${url} no ID found`);\n            return;\n        }\n        log.debug(`URL: ${url} ID: ${id}`);\n        const result = {\n            crawlName: 'asda',\n            url: request.url,\n            productId: id,\n        };\n\n        result.name = $('div#pd-wrapper h1.prod-title').firstText();\n        // result.vintage = $('').firstText();\n        result.size = $('div#pd-wrapper div.product-description h4.sect-title').match(/Net Content/i).next('p.p-text').firstText();\n        result.abv = $('div#pd-wrapper div.product-description table td').match(/Alcohol By Volume/i).next('td').firstText();\n        const ratingClassString = $('div#pd-wrapper div.rating-static-pdp').attr('class');\n        const ratingClasses = ratingClassString ? ratingClassString.split(/\\s+/) : [];\n        const ratingClass = ratingClasses && ratingClasses.filter(c => c.match(/rating-\\d{1,2}/)).length > 0 ? ratingClasses.filter(c => c.match(/rating-\\d{1,2}/))[0] : '';\n        const ratingValue = ratingClass ? ratingClass.match(/(\\d{1,2})/)[1] : '';\n        result.rating = ratingValue ? Number(ratingValue) / 10 : '';\n        result.ratingCount = $('div#pd-wrapper div.rating-static-pdp p.p-text').firstText();\n        result.colour = $('div#pd-wrapper div.product-description h4.sect-title').match(/Wine Color/i).next('p.p-text').firstText();\n        if (!result.colour) result.colour = $('div#pd-wrapper div.product-description h4.sect-title').match(/Regulated Product Name/i).next('p.p-text').firstText();\n        result.grapes = $('div#pd-wrapper div.product-description table td').match(/Grape Variety/i).next('td').firstText();\n        const descriptionValues = [];\n        descriptionValues.push($('div#pd-wrapper div.product-description table td').match(/Tasting Notes/i).next('td').firstText());\n        descriptionValues.push($('div#pd-wrapper div.product-description table td').match(/Tasting Notes/i).next('td').firstText());\n        descriptionValues.push($('div#pd-wrapper div.product-description h4.sect-title').match(/Product Marketing/i).next('p.p-text').firstText());\n        result.description = descriptionValues.filter(d => d && d.length > 0).join(' ').trim();\n        const description2Values = [];\n        descriptionValues.push($('div#pd-wrapper div.product-description h4.sect-title').match(/Brand Marketing/i).next('p.p-text').firstText());\n        description2Values.push($('div#pd-wrapper div.product-description table td').match(/Vinification Details/i).next('td').firstText());\n        description2Values.push($('div#pd-wrapper div.product-description table td').match(/History/i).next('td').firstText());\n        description2Values.push($('div#pd-wrapper div.product-description table td').match(/Regional Information/i).next('td').firstText());\n        result.description2 = description2Values.filter(d => d && d.length > 0).join(' ').trim();\n        result.country = $('div#pd-wrapper div.product-description h4.sect-title').match(/Country of Origin/i).next('p.p-text').firstText();\n        result.region = $('div#pd-wrapper div.product-description h4.sect-title').match(/Region of Origin/i).next('p.p-text').firstText();\n        result.region2 = $('div#pd-wrapper div.product-description h4.sect-title').match(/Defined Area/i).next('p.p-text').firstText();\n        result.breadcrumbs = [];\n        result.bottleImage = $('div#pd-wrapper div.pld-img-container div.s7staticimage img').attr('src');\n        if (result.bottleImage) {\n            result.bottleImage = result.bottleImage.replace(/=280/g, '=1000');\n        }\n        // result.bannerImage = $('').firstText();\n        result.price = $('div#pd-wrapper p.prod-price span.prod-price-inner').firstText();\n        result.offers = [];\n        if ($('div#pd-wrapper span.promoBanner').length > 0) {\n            const text = $('div#pd-wrapper span.promoBanner').firstText() + ' ' + $('div#pd-wrapper p.prod-price').firstText();\n            result.offers.push(text);\n        }\n        result.available = $('div#pd-wrapper a#add-button').length > 0;\n        // result.vegan = $('').length > 0;\n        // result.vegetarian = $('').length > 0;\n        result.organic = $('div#pd-wrapper i.icons-prod[title=\"Organic\"]').length > 0;\n        if (!result.organic) result.organic = $('div#pd-wrapper div.product-description p.p-text').text().search(/Organic/i) > -1 ;\n        result.fairtade = $('div#pd-wrapper div.product-description p.p-text').text().search(/Fairtrade/i) > -1;\n        // result.biodynamic = $('').length > 0;\n        return result;\n    }\n\n    async function handlePlp() {\n        log.debug(`URL: ${url} parsing PLP...`);\n        const countSelector = 'div.listingFilters p.itemCount';\n        await waitFor(countSelector);\n        const countText = $(countSelector).text();\n        const itemsResult = countText.match(/Showing\\s+(\\d+)\\s*-\\s*(\\d+)\\s*of\\s*(\\d+)\\s*items/mi);\n        if (itemsResult && itemsResult.length === 4) {\n            const pageStart = Number(itemsResult[1]);\n            const pageEnd = Number(itemsResult[2]);\n            const totalResults = Number(itemsResult[3]);\n            const pageItems = pageEnd + 1 - pageStart;\n            log.debug(`URL: ${url} items ${pageStart}-${pageEnd} of ${totalResults}`);\n            \n            let lastScrollY = 0;\n            let listings = 0;\n            const listingsSelector = 'div#listingsContainer div.product-list div.productListing';\n            // Scroll to make sure all results are loaded for this page\n            for (let scrolls = 1; scrolls <= 50; scrolls += 1) {\n                listings = $(listingsSelector).length;\n                if (listings === 0) {\n                    // No listings yet - wait a second then try again\n                    await waitFor(1000);\n                    continue;\n                }\n                if (listings >= pageItems) break;\n                const lastListingY = $(listingsSelector).last().offset().top;\n                window.scrollTo({ top: Math.max(lastScrollY + 1000, window.scrollY + 1000, lastListingY), left: 0 });\n                lastScrollY = window.scrollY;\n                await waitFor(1000);\n            }\n\n            // Enqueue pagination\n            const pagination = $('div#paginationTop select#paginationDropDown option:not(:selected)');\n            const urlMatch = url.match(/_\\/(\\d+)$/);\n            if (pagination && pagination.length > 0 && urlMatch && urlMatch.length > 1) {\n                pagination.each((i, el) => {\n                    const pageNum = $(el).text();\n                    const shelf = urlMatch[1];\n                    const pageUrl = `${url}/${pageNum}/shelf%3A0000%3A${shelf}/sortBy/relevance%20desc`;\n                    log.debug(`URL: ${url} enqueuing PLP ${pageUrl}`);\n                    context.enqueueRequest({\n                        url: pageUrl,\n                        userData: {\n                            pageType: 'plp',\n                        }\n                    });\n                });\n            }\n\n            // Enqueue product links\n            $(listingsSelector).each((i, el) => {\n                const href = $(el).find('span.productTitle a').attr('href');\n                log.debug(`URL: ${url} enqueuing PDP ${href}`);\n                if (href) {\n                    const based = new URL(href, new URL(url).origin);\n                    context.enqueueRequest({\n                        url: based.href,\n                        userData: {\n                            pageType: 'pdp'\n                        }\n                    });\n                }\n            });\n        }\n        \n        return;\n    }\n}",
  "proxyConfiguration": {
    "useApifyProxy": false
  },
  "debugLog": true,
  "browserLog": false,
  "injectJQuery": true,
  "injectUnderscore": false,
  "downloadMedia": false,
  "downloadCss": false,
  "ignoreSslErrors": false,
  "maxPagesPerCrawl": 0,
  "maxConcurrency": 5,
  "pageLoadTimeoutSecs": 30,
  "pageFunctionTimeoutSecs": 120
}