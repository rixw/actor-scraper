{
  "startUrls": [
    {
      "url": "https://www.waitrose.com/ecom/shop/browse/groceries/beer_wine_and_spirits/wine",
      "method": "GET",
      "userData": {
        "label": "PLP"
      }
    },
    {
      "url": "https://www.waitrose.com/ecom/shop/browse/groceries/beer_wine_and_spirits/champagne_and_sparkling_wine",
      "method": "GET",
      "userData": {
        "label": "PLP"
      }
    },
    {
      "url": "https://www.waitrose.com/ecom/shop/browse/groceries/beer_wine_and_spirits/beer",
      "method": "GET",
      "userData": {
        "label": "PLP"
      }
    },
    {
      "url": "https://www.waitrose.com/ecom/shop/browse/groceries/beer_wine_and_spirits/cider",
      "method": "GET",
      "userData": {
        "label": "PLP"
      }
    },
    {
      "url": "https://www.waitrose.com/ecom/shop/browse/groceries/beer_wine_and_spirits/cider",
      "method": "GET",
      "userData": {
        "label": "PLP"
      }
    }
  ],
  "useRequestQueue": false,
  "pageFunction": "async function pageFunction(context) {\n    const { request, log } = context;\n    const loadMoreSelector = '';\n\n    if(request.userData.label === 'PLP') {\n        return handlePlp(context);\n    }\n\n    return;\n\n    async function handlePlp({ log, request, waitFor, enqueuePage }) {\n        const $ = context.jQuery;\n        log.info(`Parsing a PLP page: ${request.url}`);\n        const buttonSelector = 'button[aria-label=\"Load more\"]';\n        let timeoutMillis = 20000;\n        let recursions = 0;\n        let suceessiveErrors = 0;\n        while (recursions < 20 && suceessiveErrors < 3) {\n            try {\n                recursions += 1;\n                log.info(`Waiting for \"load more\" button ${recursions}...`);\n                await waitFor(buttonSelector, { timeoutMillis });\n                log.info(`Clicking \"load more\" button ${recursions}...`);\n                $(buttonSelector).click();\n                await waitFor('div[class^=\"loadMoreWrapper\"] span[class^=\"spinner\"]');\n                suceessiveErrors = 0;\n            } catch (err) {\n                suceessiveErrors += 1;\n                log.info(`Error caught processing \"load more\" button ${recursions}...`);\n            }\n        }\n        let result = [];\n        $('header[class^=\"prodDetails\"] div[class^=\"gtm\"] a').each((i, el) => {\n            const url = $(el).attr('href');\n            log.debug(`Processing URL as result ${i}: ${url}`);\n            if (url && url.length > 0 && url.match(/\\/ecom\\/products/)) {\n                const based = new URL(url, 'https://www.waitrose.com');\n                result.push({ url: based.href });\n            }\n        });\n        return result;\n    }\n}",
  "proxyConfiguration": {
    "useApifyProxy": true
  },
  "debugLog": true,
  "browserLog": false,
  "injectJQuery": true,
  "injectUnderscore": false,
  "downloadMedia": false,
  "downloadCss": false,
  "ignoreSslErrors": true,
  "maxRequestRetries": 2,
  "maxPagesPerCrawl": 5,
  "maxConcurrency": 5,
  "pageLoadTimeoutSecs": 30,
  "pageFunctionTimeoutSecs": 360
}